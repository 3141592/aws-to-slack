---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'SNS notification sent to Slack channel'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Slack Setup'
      Parameters:
      - HookUrl
      - Channel
    - Label:
        default: 'Default Subscriptions'
      Parameters:
      - ParentAlertStack
      - FallbackEamil
Parameters:
  ParentAlertStack:
    Type: String
    Description: 'Optional: Stack name containing SNS topic from https://github.com/widdix/aws-cf-templates/blob/master/operations/alert.yaml'
  FallbackEmail:
    Description: 'Optional: email address to receive alert that function is failing. The email will only contain a count of failures -- you will need to then review CloudWatch logs to determine cause of the issue. HIGHLY RECOMMEND handling failures like this within a DeadLetterQueue via ParentAlertStack instead.'
    Type: String
    Default: ''
  HookUrl:
    Type: String
    Description: 'Slack webhook URL; see https://example.slack.com/apps/'
  Channel:
    Type: String
    Description: 'Optional: Channel name to post within'
    Default: ''

Conditions:
  HasChannel: !Not [!Equals [!Ref Channel, '']]
  HasAlertStack: !Not [!Equals [!Ref ParentAlertStack, '']]

Resources:
  Function:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: src/index.handler
      Role: !GetAtt FunctionRole.Arn
      Runtime: nodejs8.10
      MemorySize: 256
      Timeout: 10
      Code:
        S3Bucket: !Sub 'aws-to-slack-${AWS::Region}'
        S3Key: release.zip
      Environment:
        Variables:
          SLACK_CHANNEL: !If
            - HasChannel
            - !Ref Channel
            - !Ref 'AWS::NoValue'
          SLACK_HOOK_URL: !Ref HookUrl
  FunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: [ 'sts:AssumeRole' ]
          Effect: Allow
          Principal:
            Service: [ 'lambda.amazonaws.com' ]
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref Function
      Action: 'lambda:InvokeFunction'
      Principal:
        Service:
        - 'sns.amazonaws.com' # Allow SNS Notifications
        - 'events.amazonaws.com' # Allow CloudWatch Events
        - 'budgets.amazonaws.com' # Allow Budget Notifications
        - 'rds.amazonaws.com' # Allow RDS Events
        - 's3.amazonaws.com' # Allow S3 Event Notifications
  SNSTrigger:
    Condition: HasAlertStack
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt Function.Arn
      Protocol: lambda
      TopicArn: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
  AutoScalingGroupLifecycleHookQueueTooHighAlarm:
    Condition: HasAlertStack
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'AWS-to-Slack Lambda function is failing'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
      AlarmActions:
      - !GetAtt Function.Arn
      Dimensions:
      - Name: FunctionName
        Value: !Ref Function
